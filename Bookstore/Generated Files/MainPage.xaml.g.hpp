//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"
#include "MainPage.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

namespace winrt::Bookstore::implementation
{
    using Application = ::winrt::Windows::UI::Xaml::Application;
    using ComponentResourceLocation = ::winrt::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation;
    using DataTemplate = ::winrt::Windows::UI::Xaml::DataTemplate;
    using DependencyObject = ::winrt::Windows::UI::Xaml::DependencyObject;
    using DependencyProperty = ::winrt::Windows::UI::Xaml::DependencyProperty;
    using IComponentConnector = ::winrt::Windows::UI::Xaml::Markup::IComponentConnector;
    using Uri = ::winrt::Windows::Foundation::Uri;
    using XamlBindingHelper = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper;

    template <typename D, typename ... I>
    void MainPageT<D, I...>::InitializeComponent()
    {
        if (!_contentLoaded)
        {
            _contentLoaded = true;
            Uri resourceLocator{ L"ms-appx:///MainPage.xaml" };
            Application::LoadComponent(*this, resourceLocator, ComponentResourceLocation::Application);
        }
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::Connect(int32_t connectionId, IInspectable const& target)
    {
        switch (connectionId)
        {
        case 2:
            {
                auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                targetElement.Click({ static_cast<D*>(this), &D::ClickHandler});
            }
            break;
        }
        _contentLoaded = true;
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::DisconnectUnloadedObject(int32_t)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects to disconnect." };
    }

    template <typename D, typename ... I>
    void MainPageT<D, I...>::UnloadObject(DependencyObject const&)
    {
        throw ::winrt::hresult_invalid_argument { L"No unloadable objects." };
    }

    template <typename D, typename... I>
    IComponentConnector MainPageT<D, I...>::GetBindingConnector(int32_t connectionId, IInspectable const& target)
    {
        ::winrt::com_ptr<::XamlBindingInfo::XamlBindings> bindings;
        switch (connectionId)
        {
            case 1: // MainPage.xaml line 1
                {
                    auto element1 = target.as<::winrt::Windows::UI::Xaml::Controls::Page>();
                    auto objBindings = std::make_unique<MainPage_obj1_Bindings>();
                    objBindings->SetDataRoot(*this);
                    bindings = winrt::make_self<::XamlBindingInfo::XamlBindings>(std::move(objBindings));
                    Bindings = bindings;
                    element1.Loading({&*bindings, &::XamlBindingInfo::XamlBindings::Loading});
                }
                break;
        }
        return bindings ? bindings.as<::winrt::Windows::UI::Xaml::Markup::IComponentConnector>() : nullptr;
    }

    template <typename D, typename ... I>
    class MainPageT<D, I...>::MainPage_obj1_Bindings
        : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::winrt::Bookstore::MainPage, ::XamlBindingInfo::XamlBindingTrackingBase>
        , public ::XamlBindingInfo::IXamlBindingTracking
{
    public:
        MainPage_obj1_Bindings()
        {
            InitializeTracking(this);
        }

        ~MainPage_obj1_Bindings()
        {
            ReleaseAllListeners();
        }

        void Connect(int32_t connectionId, IInspectable const& target) override
        {
            switch(connectionId)
            {
            case 2: // MainPage.xaml line 11
                {
                    auto targetElement = target.as<::winrt::Windows::UI::Xaml::Controls::Button>();
                    obj2 = targetElement;
                }
                break;
            }
        }

        void DisconnectUnloadedObject(int connectionId) override
        {
            throw ::winrt::hresult_invalid_argument { L"No unloadable elements to disconnect." };
        }


    private:
        // Fields for each control that has bindings.
        ::winrt::Windows::UI::Xaml::Controls::Button obj2 { nullptr };

        // Fields for binding tracking.
        ::winrt::Windows::UI::Xaml::Data::INotifyPropertyChanged cachePC_MainViewModel_BookSku{nullptr};
        ::winrt::event_token tokenPC_MainViewModel_BookSku {};

        // Update methods for each path node used in binding steps.

        void Update_(::winrt::Bookstore::MainPage obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_MainViewModel(obj.MainViewModel(), phase);
                }
            }
        }

        void Update_MainViewModel(::winrt::Bookstore::BookstoreViewModel obj, int32_t phase)
        {
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_MainViewModel_BookSku(obj.BookSku(), phase);
                }
            }
        }

        void Update_MainViewModel_BookSku(::winrt::Bookstore::BookSku obj, int32_t phase)
        {
            _bindingsTracking->UpdatePropertyChangedListener(obj, cachePC_MainViewModel_BookSku, tokenPC_MainViewModel_BookSku);
            if (obj)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    Update_MainViewModel_BookSku_Title(obj.Title(), phase);
                }
            }
        }

        void Update_MainViewModel_BookSku_Title(::winrt::hstring obj, int32_t phase)
        {
            if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
            {
                // MainPage.xaml line 11
                Set_Windows_UI_Xaml_Controls_ContentControl_Content(obj2, ::winrt::box_value(obj), std::nullopt);
            }
        }

        virtual void ReleaseAllListeners() override
        {
            _bindingsTracking->UpdatePropertyChangedListener(nullptr, cachePC_MainViewModel_BookSku, tokenPC_MainViewModel_BookSku);
        }

        virtual void PropertyChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Data::PropertyChangedEventArgs const& e) override
        {
            if (cachePC_MainViewModel_BookSku && cachePC_MainViewModel_BookSku == sender)
            {
                auto propName = e.PropertyName();
                auto obj = sender.as<::winrt::Bookstore::BookSku>();
                if (propName.empty())
                {
                    if (obj)
                    {
                        Update_MainViewModel_BookSku_Title(obj.Title(), DATA_CHANGED);
                    }
                }
                else if (propName == L"Title")
                {
                    if (obj)
                    {
                        Update_MainViewModel_BookSku_Title(obj.Title(), DATA_CHANGED);
                    }
                }
            }
        }

        void CollectionChanged(IInspectable const& sender, ::winrt::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs const& e) override
        {
        }

        void VectorChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IVectorChangedEventArgs const& e) override
        {
        }

        void MapChanged(IInspectable const& sender, ::winrt::Windows::Foundation::Collections::IMapChangedEventArgs<::winrt::hstring> const& e) override
        {
        }

        void DependencyPropertyChanged(DependencyObject const& sender, DependencyProperty const& prop) override
        {
            if (sender)
            {
            }
        }

        static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(::winrt::Windows::UI::Xaml::Controls::ContentControl const& obj, ::winrt::Windows::Foundation::IInspectable value, std::optional<::winrt::hstring> const& targetNullValue)
        {
            if (!value && targetNullValue)
            {
                value = ::winrt::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::winrt::xaml_typename<::winrt::Windows::Foundation::IInspectable>(), ::winrt::box_value(::winrt::hstring(targetNullValue.value()))).as<::winrt::Windows::Foundation::IInspectable>();
            }
            obj.Content(value);
        }
    }; 

    template MainPageT<MainPage>;
}


#pragma warning(pop)


